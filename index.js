const Telegraf = require('telegraf');
const cron = require('node-cron');
const moment = require('moment');

const { saveUser, User } = require('./db');
const { getWeather, getCurrentWeather } = require('./weather'); 
const { 
  getFormattedDate,
  getFormattedTime,
  calcPercent,
  getMoonEmoji,
  formatWeatherString,
  formatCurrentWeather,
} = require('./helpers');

require('dotenv').config();

const bot = new Telegraf(process.env.BOT_TOKEN);

bot.start((ctx) => {
  console.log('started:', ctx.from.id)
  return ctx.reply('–ü—Ä–∏–≤—ñ—Ç! –Ø –ø–æ–≥–æ–¥–Ω—ñ–π –±–æ—Ç –Ü–≤–∞–Ω–æ-–§–∞–Ω–∫—ñ–≤—Å—å–∫–∞ - weather IF üñê! –í—ñ–¥–ø—Ä–∞–≤—Ç–µ –≥–æ–¥–∏–Ω—É, –æ –∫–æ—Ç—Ä—ñ–π –≤–∏ –± —Ö–æ—Ç—ñ–ª–∏ –æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–≥–æ–¥—É –≤ —Ñ–æ—Ä–º–∞—Ç—ñ (HH:MM).–ü—Ä–∏–∫–ª–∞–¥: "10:15". –î–ª—è —Ç–æ–≥–æ, —â–æ–± –æ—Ç—Ä–∏–º–∞—Ç–∏ –±—ñ–ª—å—à–µ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó, –Ω–∞–ø–∏—à—ñ—Ç—å "/help".')
  .catch((error) => {
    console.log(error, 'promise catch error');
  });
});

bot.catch((error) => {
  console.log(error, 'catch error');
});

var task = cron.schedule('* * * * *', function() {
  const date = moment();
  console.log(date.format('H:mm'));
  User.find({ time: date.format('H:mm') }, (error, users) => {
    if (error) throw error;
    if (users.length > 0) {
      getWeather((result) => {
        users.forEach((user) => {
          bot.telegram.sendMessage(user.telegramUserId, formatWeatherString(result.daily.data[0]))
            .catch(error => console.log('Error'));
        })  
      });
    }
  });
});

bot.command('help', (ctx) => ctx.reply(
  '"/start" - –¥–ª—è –ø–æ—á–∞—Ç–∫—É —Ä–æ–±–æ—Ç–∏' +
  '"/stop" - –∑—É–ø–∏–Ω–∏—Ç–∏ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è;\n' +
  '"HH:MM" - —á–∞—Å, –∫–æ–ª–∏ –≤–∏ —Ö–æ—á–µ—Ç–µ –æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏ —â–æ–¥–µ–Ω–Ω—ñ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è;\n' +
  '"/current" - –æ—Ç—Ä–∏–º–∞—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –ø–æ–≥–æ–¥—É –Ω–∞ –¥–∞–Ω–∏–π –º–æ–º–µ–Ω—Ç;'
));

bot.command('stop', (ctx) => {
  console.log('Stopped: ', ctx.chat.id);
  User.findOneAndRemove({ telegramUserId: ctx.chat.id }, (error, result) => {
    if (error) throw new Error(error);
    console.log(result);
    ctx.reply('–°–ø–æ–≤—ñ—â–µ–Ω–Ω—è –∑—É–ø–∏–Ω–µ–Ω–æ üò±');
  });
});

bot.hears('–ü—Ä–∏–≤—ñ—Ç', (ctx) => ctx.reply('–ü—Ä–∏–≤—ñ—Ç!'));

bot.hears('test', (ctx) => {
  // bot.telegram.sendMessage(231630635, '–í–≤–µ—Å—å –º–∏—Ä —Ç–µ–±—è –∫—Ä—É–∂–∏—Ç!')
});

bot.hears('/current', (ctx) => {
  getCurrentWeather((result) => {
    bot.telegram.sendMessage(ctx.chat.id, formatCurrentWeather(result.currently))
      .catch(error => console.log('Error'));
  });
});

bot.hears(/(—Ö—É–π|–ø–∏–∑–¥|–±–ª—è—Ç|–±–ª—è–¥|—Å—É–∫–∞|–ø—ñ–∑–¥|—î–±–∞|—ó–±–∞|–π–æ–±|—Ö—É—î)/, (ctx) => {
  ctx.reply('–Ü —Ç–∏ —Ç–∏–º —Ä–æ—Ç–æ–º –º–∞–º—É —Ü—ñ–ª—É—î—à? üòí');
})


bot.hears(/^([0-9]|0[0-9]|1[0-9]|2[0-3]):[0-5][0-9]$/, (ctx) => {
  const { first_name, id, last_name } = ctx.message.chat;
  User.findOne({ telegramUserId: id }, (error, userDoc) => {
    if(error) throw new Error(error); 
    if(userDoc) {
      userDoc.set({ time: ctx.message.text });
      userDoc.save((error, updatedUser) => {
        if(error) throw new Error(error);
        return ctx.reply(`‚è∞ –í–∏ –∑–º—ñ–Ω–∏–ª–∏ —á–∞—Å —Å–ø–æ–≤—ñ—â–µ–Ω—å –ø—Ä–æ –ø–æ–≥–æ–¥—É. –¢–µ–ø–µ—Ä —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –±—É–¥—É—Ç—å –ø—Ä–∏—Ö–æ–¥–∏—Ç–∏ –≤ ${updatedUser.time}`);
      });
    } else {
      User.saveUser({
        firstName: first_name,
        lastName: last_name,
        telegramUserId: id,
        time: ctx.message.text,
      });
      ctx.reply(`‚è∞ –°–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–≥–æ–¥—É –≤–∞–º –±—É–¥—É—Ç—å –ø—Ä–∏—Ö–æ–¥–∏—Ç–∏ —â–æ–¥–Ω—è –æ ${ctx.message.text}.\n–©–æ–± –ø—Ä–∏–ø–∏–Ω–∏—Ç–∏ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—è —Å–ø–æ–≤—ñ—â–µ–Ω—å –Ω–∞–±–µ—Ä—ñ—Ç—å –∫–æ–º–∞–Ω—Ç—É "/stop"`);
    }
  })
});

bot.startPolling();